# coding: utf-8

"""
    Product Catalog APIs

    Ingram Micro product catalog API for requesting price and availability of SKUs in real time.  *Production URL - https://api.ingrammicro.com:443/resellers/v5*  # noqa: E501

    OpenAPI spec version: 5.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ProductSearchResponseServiceresponsePartnumbers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ingrampartnumber': 'str',
        'manufacturerpartnumber': 'str',
        'upccode': 'str',
        'productdescription': 'str',
        'currency': 'str',
        'haswarranty': 'str'
    }

    attribute_map = {
        'ingrampartnumber': 'ingrampartnumber',
        'manufacturerpartnumber': 'manufacturerpartnumber',
        'upccode': 'upccode',
        'productdescription': 'productdescription',
        'currency': 'currency',
        'haswarranty': 'haswarranty'
    }

    def __init__(self, ingrampartnumber=None, manufacturerpartnumber=None, upccode=None, productdescription=None, currency=None, haswarranty=None):  # noqa: E501
        """ProductSearchResponseServiceresponsePartnumbers - a model defined in Swagger"""  # noqa: E501
        self._ingrampartnumber = None
        self._manufacturerpartnumber = None
        self._upccode = None
        self._productdescription = None
        self._currency = None
        self._haswarranty = None
        self.discriminator = None
        if ingrampartnumber is not None:
            self.ingrampartnumber = ingrampartnumber
        if manufacturerpartnumber is not None:
            self.manufacturerpartnumber = manufacturerpartnumber
        if upccode is not None:
            self.upccode = upccode
        if productdescription is not None:
            self.productdescription = productdescription
        if currency is not None:
            self.currency = currency
        if haswarranty is not None:
            self.haswarranty = haswarranty

    @property
    def ingrampartnumber(self):
        """Gets the ingrampartnumber of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501

        Ingram Part Number  # noqa: E501

        :return: The ingrampartnumber of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501
        :rtype: str
        """
        return self._ingrampartnumber

    @ingrampartnumber.setter
    def ingrampartnumber(self, ingrampartnumber):
        """Sets the ingrampartnumber of this ProductSearchResponseServiceresponsePartnumbers.

        Ingram Part Number  # noqa: E501

        :param ingrampartnumber: The ingrampartnumber of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501
        :type: str
        """

        self._ingrampartnumber = ingrampartnumber

    @property
    def manufacturerpartnumber(self):
        """Gets the manufacturerpartnumber of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501

        Vendor or Manufacturer Part Number  # noqa: E501

        :return: The manufacturerpartnumber of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501
        :rtype: str
        """
        return self._manufacturerpartnumber

    @manufacturerpartnumber.setter
    def manufacturerpartnumber(self, manufacturerpartnumber):
        """Sets the manufacturerpartnumber of this ProductSearchResponseServiceresponsePartnumbers.

        Vendor or Manufacturer Part Number  # noqa: E501

        :param manufacturerpartnumber: The manufacturerpartnumber of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501
        :type: str
        """

        self._manufacturerpartnumber = manufacturerpartnumber

    @property
    def upccode(self):
        """Gets the upccode of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501

        UPC  # noqa: E501

        :return: The upccode of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501
        :rtype: str
        """
        return self._upccode

    @upccode.setter
    def upccode(self, upccode):
        """Sets the upccode of this ProductSearchResponseServiceresponsePartnumbers.

        UPC  # noqa: E501

        :param upccode: The upccode of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501
        :type: str
        """

        self._upccode = upccode

    @property
    def productdescription(self):
        """Gets the productdescription of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501

        Product description  # noqa: E501

        :return: The productdescription of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501
        :rtype: str
        """
        return self._productdescription

    @productdescription.setter
    def productdescription(self, productdescription):
        """Sets the productdescription of this ProductSearchResponseServiceresponsePartnumbers.

        Product description  # noqa: E501

        :param productdescription: The productdescription of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501
        :type: str
        """

        self._productdescription = productdescription

    @property
    def currency(self):
        """Gets the currency of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501


        :return: The currency of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ProductSearchResponseServiceresponsePartnumbers.


        :param currency: The currency of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def haswarranty(self):
        """Gets the haswarranty of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501


        :return: The haswarranty of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501
        :rtype: str
        """
        return self._haswarranty

    @haswarranty.setter
    def haswarranty(self, haswarranty):
        """Sets the haswarranty of this ProductSearchResponseServiceresponsePartnumbers.


        :param haswarranty: The haswarranty of this ProductSearchResponseServiceresponsePartnumbers.  # noqa: E501
        :type: str
        """

        self._haswarranty = haswarranty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductSearchResponseServiceresponsePartnumbers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductSearchResponseServiceresponsePartnumbers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
