# coding: utf-8

"""
    Product Catalog APIs

    Ingram Micro product catalog API for requesting price and availability of SKUs in real time.  *Production URL - https://api.ingrammicro.com:443/resellers/v5*  # noqa: E501

    OpenAPI spec version: 5.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ProductSearchResponseServiceresponseResponsepreamble(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requeststatus': 'str',
        'returncode': 'str',
        'returnmessage': 'str'
    }

    attribute_map = {
        'requeststatus': 'requeststatus',
        'returncode': 'returncode',
        'returnmessage': 'returnmessage'
    }

    def __init__(self, requeststatus=None, returncode=None, returnmessage=None):  # noqa: E501
        """ProductSearchResponseServiceresponseResponsepreamble - a model defined in Swagger"""  # noqa: E501
        self._requeststatus = None
        self._returncode = None
        self._returnmessage = None
        self.discriminator = None
        if requeststatus is not None:
            self.requeststatus = requeststatus
        if returncode is not None:
            self.returncode = returncode
        if returnmessage is not None:
            self.returnmessage = returnmessage

    @property
    def requeststatus(self):
        """Gets the requeststatus of this ProductSearchResponseServiceresponseResponsepreamble.  # noqa: E501


        :return: The requeststatus of this ProductSearchResponseServiceresponseResponsepreamble.  # noqa: E501
        :rtype: str
        """
        return self._requeststatus

    @requeststatus.setter
    def requeststatus(self, requeststatus):
        """Sets the requeststatus of this ProductSearchResponseServiceresponseResponsepreamble.


        :param requeststatus: The requeststatus of this ProductSearchResponseServiceresponseResponsepreamble.  # noqa: E501
        :type: str
        """

        self._requeststatus = requeststatus

    @property
    def returncode(self):
        """Gets the returncode of this ProductSearchResponseServiceresponseResponsepreamble.  # noqa: E501


        :return: The returncode of this ProductSearchResponseServiceresponseResponsepreamble.  # noqa: E501
        :rtype: str
        """
        return self._returncode

    @returncode.setter
    def returncode(self, returncode):
        """Sets the returncode of this ProductSearchResponseServiceresponseResponsepreamble.


        :param returncode: The returncode of this ProductSearchResponseServiceresponseResponsepreamble.  # noqa: E501
        :type: str
        """

        self._returncode = returncode

    @property
    def returnmessage(self):
        """Gets the returnmessage of this ProductSearchResponseServiceresponseResponsepreamble.  # noqa: E501


        :return: The returnmessage of this ProductSearchResponseServiceresponseResponsepreamble.  # noqa: E501
        :rtype: str
        """
        return self._returnmessage

    @returnmessage.setter
    def returnmessage(self, returnmessage):
        """Sets the returnmessage of this ProductSearchResponseServiceresponseResponsepreamble.


        :param returnmessage: The returnmessage of this ProductSearchResponseServiceresponseResponsepreamble.  # noqa: E501
        :type: str
        """

        self._returnmessage = returnmessage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductSearchResponseServiceresponseResponsepreamble, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductSearchResponseServiceresponseResponsepreamble):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
