# coding: utf-8

"""
    Product Catalog APIs

    Ingram Micro product catalog API for requesting price and availability of SKUs in real time.  *Production URL - https://api.ingrammicro.com:443/resellers/v5*  # noqa: E501

    OpenAPI spec version: 5.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'itemstatus': 'str',
        'statusmessage': 'str',
        'ingrampartnumber': 'str',
        'vendorpartnumber': 'str',
        'globalskuid': 'str',
        'customerprice': 'float',
        'partdescription1': 'str',
        'partdescription2': 'str',
        'vendornumber': 'str',
        'vendorname': 'str',
        'cpucode': 'str',
        '_class': 'str',
        'skustatus': 'str',
        'mediacpu': 'str',
        'categorysubcategory': 'str',
        'retailprice': 'float',
        'newmedia': 'str',
        'enduserrequired': 'str',
        'backorderflag': 'str',
        'skuauthorized': 'str',
        'extendedvendorpartnumber': 'str',
        'warehousedetails': 'list[WarehouseListType]'
    }

    attribute_map = {
        'itemstatus': 'itemstatus',
        'statusmessage': 'statusmessage',
        'ingrampartnumber': 'ingrampartnumber',
        'vendorpartnumber': 'vendorpartnumber',
        'globalskuid': 'globalskuid',
        'customerprice': 'customerprice',
        'partdescription1': 'partdescription1',
        'partdescription2': 'partdescription2',
        'vendornumber': 'vendornumber',
        'vendorname': 'vendorname',
        'cpucode': 'cpucode',
        '_class': 'class',
        'skustatus': 'skustatus',
        'mediacpu': 'mediacpu',
        'categorysubcategory': 'categorysubcategory',
        'retailprice': 'retailprice',
        'newmedia': 'newmedia',
        'enduserrequired': 'enduserrequired',
        'backorderflag': 'backorderflag',
        'skuauthorized': 'skuauthorized',
        'extendedvendorpartnumber': 'extendedvendorpartnumber',
        'warehousedetails': 'warehousedetails'
    }

    def __init__(self, itemstatus=None, statusmessage=None, ingrampartnumber=None, vendorpartnumber=None, globalskuid=None, customerprice=None, partdescription1=None, partdescription2=None, vendornumber=None, vendorname=None, cpucode=None, _class=None, skustatus=None, mediacpu=None, categorysubcategory=None, retailprice=None, newmedia=None, enduserrequired=None, backorderflag=None, skuauthorized=None, extendedvendorpartnumber=None, warehousedetails=None):  # noqa: E501
        """PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails - a model defined in Swagger"""  # noqa: E501
        self._itemstatus = None
        self._statusmessage = None
        self._ingrampartnumber = None
        self._vendorpartnumber = None
        self._globalskuid = None
        self._customerprice = None
        self._partdescription1 = None
        self._partdescription2 = None
        self._vendornumber = None
        self._vendorname = None
        self._cpucode = None
        self.__class = None
        self._skustatus = None
        self._mediacpu = None
        self._categorysubcategory = None
        self._retailprice = None
        self._newmedia = None
        self._enduserrequired = None
        self._backorderflag = None
        self._skuauthorized = None
        self._extendedvendorpartnumber = None
        self._warehousedetails = None
        self.discriminator = None
        if itemstatus is not None:
            self.itemstatus = itemstatus
        if statusmessage is not None:
            self.statusmessage = statusmessage
        if ingrampartnumber is not None:
            self.ingrampartnumber = ingrampartnumber
        if vendorpartnumber is not None:
            self.vendorpartnumber = vendorpartnumber
        if globalskuid is not None:
            self.globalskuid = globalskuid
        if customerprice is not None:
            self.customerprice = customerprice
        if partdescription1 is not None:
            self.partdescription1 = partdescription1
        if partdescription2 is not None:
            self.partdescription2 = partdescription2
        if vendornumber is not None:
            self.vendornumber = vendornumber
        if vendorname is not None:
            self.vendorname = vendorname
        if cpucode is not None:
            self.cpucode = cpucode
        if _class is not None:
            self._class = _class
        if skustatus is not None:
            self.skustatus = skustatus
        if mediacpu is not None:
            self.mediacpu = mediacpu
        if categorysubcategory is not None:
            self.categorysubcategory = categorysubcategory
        if retailprice is not None:
            self.retailprice = retailprice
        if newmedia is not None:
            self.newmedia = newmedia
        if enduserrequired is not None:
            self.enduserrequired = enduserrequired
        if backorderflag is not None:
            self.backorderflag = backorderflag
        if skuauthorized is not None:
            self.skuauthorized = skuauthorized
        if extendedvendorpartnumber is not None:
            self.extendedvendorpartnumber = extendedvendorpartnumber
        if warehousedetails is not None:
            self.warehousedetails = warehousedetails

    @property
    def itemstatus(self):
        """Gets the itemstatus of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501

        SUCCESS or FAILED  # noqa: E501

        :return: The itemstatus of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._itemstatus

    @itemstatus.setter
    def itemstatus(self, itemstatus):
        """Sets the itemstatus of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.

        SUCCESS or FAILED  # noqa: E501

        :param itemstatus: The itemstatus of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESS", "FAILED"]  # noqa: E501
        if itemstatus not in allowed_values:
            raise ValueError(
                "Invalid value for `itemstatus` ({0}), must be one of {1}"  # noqa: E501
                .format(itemstatus, allowed_values)
            )

        self._itemstatus = itemstatus

    @property
    def statusmessage(self):
        """Gets the statusmessage of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501

        Description of itemstatus  # noqa: E501

        :return: The statusmessage of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._statusmessage

    @statusmessage.setter
    def statusmessage(self, statusmessage):
        """Sets the statusmessage of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.

        Description of itemstatus  # noqa: E501

        :param statusmessage: The statusmessage of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """

        self._statusmessage = statusmessage

    @property
    def ingrampartnumber(self):
        """Gets the ingrampartnumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501

        Ingram Micro part number  # noqa: E501

        :return: The ingrampartnumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._ingrampartnumber

    @ingrampartnumber.setter
    def ingrampartnumber(self, ingrampartnumber):
        """Sets the ingrampartnumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.

        Ingram Micro part number  # noqa: E501

        :param ingrampartnumber: The ingrampartnumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """

        self._ingrampartnumber = ingrampartnumber

    @property
    def vendorpartnumber(self):
        """Gets the vendorpartnumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501

        Manufacturer/Vendor part number  # noqa: E501

        :return: The vendorpartnumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._vendorpartnumber

    @vendorpartnumber.setter
    def vendorpartnumber(self, vendorpartnumber):
        """Sets the vendorpartnumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.

        Manufacturer/Vendor part number  # noqa: E501

        :param vendorpartnumber: The vendorpartnumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """

        self._vendorpartnumber = vendorpartnumber

    @property
    def globalskuid(self):
        """Gets the globalskuid of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501


        :return: The globalskuid of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._globalskuid

    @globalskuid.setter
    def globalskuid(self, globalskuid):
        """Sets the globalskuid of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.


        :param globalskuid: The globalskuid of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """

        self._globalskuid = globalskuid

    @property
    def customerprice(self):
        """Gets the customerprice of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501

        Customer specific price for the product, excluding taxes  # noqa: E501

        :return: The customerprice of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: float
        """
        return self._customerprice

    @customerprice.setter
    def customerprice(self, customerprice):
        """Sets the customerprice of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.

        Customer specific price for the product, excluding taxes  # noqa: E501

        :param customerprice: The customerprice of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: float
        """

        self._customerprice = customerprice

    @property
    def partdescription1(self):
        """Gets the partdescription1 of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501

        Product description part 1  # noqa: E501

        :return: The partdescription1 of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._partdescription1

    @partdescription1.setter
    def partdescription1(self, partdescription1):
        """Sets the partdescription1 of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.

        Product description part 1  # noqa: E501

        :param partdescription1: The partdescription1 of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """

        self._partdescription1 = partdescription1

    @property
    def partdescription2(self):
        """Gets the partdescription2 of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501

        Product description part 2  # noqa: E501

        :return: The partdescription2 of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._partdescription2

    @partdescription2.setter
    def partdescription2(self, partdescription2):
        """Sets the partdescription2 of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.

        Product description part 2  # noqa: E501

        :param partdescription2: The partdescription2 of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """

        self._partdescription2 = partdescription2

    @property
    def vendornumber(self):
        """Gets the vendornumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501


        :return: The vendornumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._vendornumber

    @vendornumber.setter
    def vendornumber(self, vendornumber):
        """Sets the vendornumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.


        :param vendornumber: The vendornumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """

        self._vendornumber = vendornumber

    @property
    def vendorname(self):
        """Gets the vendorname of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501

        Name of the vendor  # noqa: E501

        :return: The vendorname of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._vendorname

    @vendorname.setter
    def vendorname(self, vendorname):
        """Sets the vendorname of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.

        Name of the vendor  # noqa: E501

        :param vendorname: The vendorname of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """

        self._vendorname = vendorname

    @property
    def cpucode(self):
        """Gets the cpucode of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501


        :return: The cpucode of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._cpucode

    @cpucode.setter
    def cpucode(self, cpucode):
        """Sets the cpucode of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.


        :param cpucode: The cpucode of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """

        self._cpucode = cpucode

    @property
    def _class(self):
        """Gets the _class of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501

        Ingram Micro assigned product classification -  A-Stocked product in all IM warehouses, B-Limited stock in IM warehouses, C-Stocked in fewer wareshouses, D-Ingram discontinued, E-Planned to be phased out as per the vendor, F-Carried for specific customer as per the contract, N-New SKU, O-Discontinued to be liquidated, S-Order for specialized demand, V-Discontinued by vendor, X-Direct Ship products from vendor  # noqa: E501

        :return: The _class of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.

        Ingram Micro assigned product classification -  A-Stocked product in all IM warehouses, B-Limited stock in IM warehouses, C-Stocked in fewer wareshouses, D-Ingram discontinued, E-Planned to be phased out as per the vendor, F-Carried for specific customer as per the contract, N-New SKU, O-Discontinued to be liquidated, S-Order for specialized demand, V-Discontinued by vendor, X-Direct Ship products from vendor  # noqa: E501

        :param _class: The _class of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["A", "B", "C", "D", "E", "F", "N", "O", "S", "V", "X"]  # noqa: E501
        if _class not in allowed_values:
            raise ValueError(
                "Invalid value for `_class` ({0}), must be one of {1}"  # noqa: E501
                .format(_class, allowed_values)
            )

        self.__class = _class

    @property
    def skustatus(self):
        """Gets the skustatus of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501

        Identifies if the SKU has been discontinued.  # noqa: E501

        :return: The skustatus of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._skustatus

    @skustatus.setter
    def skustatus(self, skustatus):
        """Sets the skustatus of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.

        Identifies if the SKU has been discontinued.  # noqa: E501

        :param skustatus: The skustatus of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE"]  # noqa: E501
        if skustatus not in allowed_values:
            raise ValueError(
                "Invalid value for `skustatus` ({0}), must be one of {1}"  # noqa: E501
                .format(skustatus, allowed_values)
            )

        self._skustatus = skustatus

    @property
    def mediacpu(self):
        """Gets the mediacpu of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501


        :return: The mediacpu of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._mediacpu

    @mediacpu.setter
    def mediacpu(self, mediacpu):
        """Sets the mediacpu of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.


        :param mediacpu: The mediacpu of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """

        self._mediacpu = mediacpu

    @property
    def categorysubcategory(self):
        """Gets the categorysubcategory of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501


        :return: The categorysubcategory of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._categorysubcategory

    @categorysubcategory.setter
    def categorysubcategory(self, categorysubcategory):
        """Sets the categorysubcategory of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.


        :param categorysubcategory: The categorysubcategory of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """

        self._categorysubcategory = categorysubcategory

    @property
    def retailprice(self):
        """Gets the retailprice of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501


        :return: The retailprice of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: float
        """
        return self._retailprice

    @retailprice.setter
    def retailprice(self, retailprice):
        """Sets the retailprice of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.


        :param retailprice: The retailprice of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: float
        """

        self._retailprice = retailprice

    @property
    def newmedia(self):
        """Gets the newmedia of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501


        :return: The newmedia of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._newmedia

    @newmedia.setter
    def newmedia(self, newmedia):
        """Sets the newmedia of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.


        :param newmedia: The newmedia of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """

        self._newmedia = newmedia

    @property
    def enduserrequired(self):
        """Gets the enduserrequired of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501

        Y - End user required N - Not required End user  # noqa: E501

        :return: The enduserrequired of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._enduserrequired

    @enduserrequired.setter
    def enduserrequired(self, enduserrequired):
        """Sets the enduserrequired of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.

        Y - End user required N - Not required End user  # noqa: E501

        :param enduserrequired: The enduserrequired of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N"]  # noqa: E501
        if enduserrequired not in allowed_values:
            raise ValueError(
                "Invalid value for `enduserrequired` ({0}), must be one of {1}"  # noqa: E501
                .format(enduserrequired, allowed_values)
            )

        self._enduserrequired = enduserrequired

    @property
    def backorderflag(self):
        """Gets the backorderflag of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501

        Y- Allow Backorder Flag N- Not allowed  # noqa: E501

        :return: The backorderflag of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._backorderflag

    @backorderflag.setter
    def backorderflag(self, backorderflag):
        """Sets the backorderflag of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.

        Y- Allow Backorder Flag N- Not allowed  # noqa: E501

        :param backorderflag: The backorderflag of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N"]  # noqa: E501
        if backorderflag not in allowed_values:
            raise ValueError(
                "Invalid value for `backorderflag` ({0}), must be one of {1}"  # noqa: E501
                .format(backorderflag, allowed_values)
            )

        self._backorderflag = backorderflag

    @property
    def skuauthorized(self):
        """Gets the skuauthorized of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501


        :return: The skuauthorized of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._skuauthorized

    @skuauthorized.setter
    def skuauthorized(self, skuauthorized):
        """Sets the skuauthorized of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.


        :param skuauthorized: The skuauthorized of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """

        self._skuauthorized = skuauthorized

    @property
    def extendedvendorpartnumber(self):
        """Gets the extendedvendorpartnumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501


        :return: The extendedvendorpartnumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: str
        """
        return self._extendedvendorpartnumber

    @extendedvendorpartnumber.setter
    def extendedvendorpartnumber(self, extendedvendorpartnumber):
        """Sets the extendedvendorpartnumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.


        :param extendedvendorpartnumber: The extendedvendorpartnumber of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: str
        """

        self._extendedvendorpartnumber = extendedvendorpartnumber

    @property
    def warehousedetails(self):
        """Gets the warehousedetails of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501


        :return: The warehousedetails of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :rtype: list[WarehouseListType]
        """
        return self._warehousedetails

    @warehousedetails.setter
    def warehousedetails(self, warehousedetails):
        """Sets the warehousedetails of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.


        :param warehousedetails: The warehousedetails of this PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails.  # noqa: E501
        :type: list[WarehouseListType]
        """

        self._warehousedetails = warehousedetails

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
