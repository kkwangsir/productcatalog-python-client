# coding: utf-8

"""
    Product Catalog APIs

    Ingram Micro product catalog API for requesting price and availability of SKUs in real time.  *Production URL - https://api.ingrammicro.com:443/resellers/v5*  # noqa: E501

    OpenAPI spec version: 5.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CatalogApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_v5_catalog_productsearch(self, customer_number, iso_country_code, part_number, **kwargs):  # noqa: E501
        """Search product catalog  # noqa: E501

        Search product catalog using Ingram part numbers, vendor/manufacturer part numbers, customer part numbers or UPC. Use this endpoint to find the ingrampartnumber using vendorpartnumber or UPC.  - PartNumber field is capable of searching Ingram part numbers, vendor/manufacturer part numbers, customer part numbers or UPC.  *NOTE: isoCountryCode and customerNumber is mandatory.*   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v5_catalog_productsearch(customer_number, iso_country_code, part_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_number: Your unique Ingram Micro customer number (required)
        :param str iso_country_code: 2 chars country code (required)
        :param str part_number: Part Number can be ingram part number or vendor part number or customer part number or UPC (required)
        :return: ProductSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_v5_catalog_productsearch_with_http_info(customer_number, iso_country_code, part_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_v5_catalog_productsearch_with_http_info(customer_number, iso_country_code, part_number, **kwargs)  # noqa: E501
            return data

    def get_v5_catalog_productsearch_with_http_info(self, customer_number, iso_country_code, part_number, **kwargs):  # noqa: E501
        """Search product catalog  # noqa: E501

        Search product catalog using Ingram part numbers, vendor/manufacturer part numbers, customer part numbers or UPC. Use this endpoint to find the ingrampartnumber using vendorpartnumber or UPC.  - PartNumber field is capable of searching Ingram part numbers, vendor/manufacturer part numbers, customer part numbers or UPC.  *NOTE: isoCountryCode and customerNumber is mandatory.*   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v5_catalog_productsearch_with_http_info(customer_number, iso_country_code, part_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_number: Your unique Ingram Micro customer number (required)
        :param str iso_country_code: 2 chars country code (required)
        :param str part_number: Part Number can be ingram part number or vendor part number or customer part number or UPC (required)
        :return: ProductSearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_number', 'iso_country_code', 'part_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_v5_catalog_productsearch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_number' is set
        if ('customer_number' not in params or
                params['customer_number'] is None):
            raise ValueError("Missing the required parameter `customer_number` when calling `get_v5_catalog_productsearch`")  # noqa: E501
        # verify the required parameter 'iso_country_code' is set
        if ('iso_country_code' not in params or
                params['iso_country_code'] is None):
            raise ValueError("Missing the required parameter `iso_country_code` when calling `get_v5_catalog_productsearch`")  # noqa: E501
        # verify the required parameter 'part_number' is set
        if ('part_number' not in params or
                params['part_number'] is None):
            raise ValueError("Missing the required parameter `part_number` when calling `get_v5_catalog_productsearch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_number' in params:
            query_params.append(('customerNumber', params['customer_number']))  # noqa: E501
        if 'iso_country_code' in params:
            query_params.append(('isoCountryCode', params['iso_country_code']))  # noqa: E501
        if 'part_number' in params:
            query_params.append(('partNumber', params['part_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/catalog', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductSearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def multi_sku_price_and_stock(self, **kwargs):  # noqa: E501
        """Find availability of upto 50 SKUs  # noqa: E501

        Please use this end-point to find the price and availability of up to 50 SKUs while placing an order. This endpoint helps to confirm the details just prior to placing a real-time call.  This endpoint is not for refreshing the full catalog with availability and pricing information. We are applying rate-limits on this endpoint and continuous cyclical calls will start erroring out. Customers that perform this activity may lose access to the endpoint.  For the full catalog refresh, we can provide a Price and Inventory file in flat file format, which can be obtained through FTP download. Please contact your sales rep for details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.multi_sku_price_and_stock(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PriceAndAvailabilityRequest body:
        :return: PriceAndAvailabilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.multi_sku_price_and_stock_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.multi_sku_price_and_stock_with_http_info(**kwargs)  # noqa: E501
            return data

    def multi_sku_price_and_stock_with_http_info(self, **kwargs):  # noqa: E501
        """Find availability of upto 50 SKUs  # noqa: E501

        Please use this end-point to find the price and availability of up to 50 SKUs while placing an order. This endpoint helps to confirm the details just prior to placing a real-time call.  This endpoint is not for refreshing the full catalog with availability and pricing information. We are applying rate-limits on this endpoint and continuous cyclical calls will start erroring out. Customers that perform this activity may lose access to the endpoint.  For the full catalog refresh, we can provide a Price and Inventory file in flat file format, which can be obtained through FTP download. Please contact your sales rep for details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.multi_sku_price_and_stock_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PriceAndAvailabilityRequest body:
        :return: PriceAndAvailabilityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method multi_sku_price_and_stock" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/catalog/priceandavailability', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceAndAvailabilityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
